{"ast":null,"code":"var _jsxFileName = \"/Users/kanchanmhatre/Thinkful/Project_Flashcards_Qualified_1/src/components/CreateDeck/CreateDeckForm.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { listDecks, createDeck, readDeck, updateDeck } from \"../../utils/api/index\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction CreateDeckForm() {\n  _s();\n  const initialFormState = {\n    name: \"\",\n    description: \"\"\n  };\n  const [formData, setformData] = useState({\n    ...initialFormState\n  }); /* Set form state to blank array*/\n  const handleChange = _ref => {\n    let {\n      target\n    } = _ref;\n    setformData({\n      ...formData,\n      [target.name]: target.value\n    });\n  };\n  const handleSubmit = event => {\n    event.preventDefault();\n    console.log(\"Submitted:\", formData);\n    setformData({\n      ...initialFormState\n    });\n    event.target.reset();\n  };\n  const newDeckPost = async () => {\n    const result = await createDeck(formData);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"name\",\n          children: [\"Name\", /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"name\",\n            type: \"text\",\n            name: \"name\",\n            placeholder: \"Deck Name\",\n            onChange: handleChange,\n            value: formData.value\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"description\",\n          children: [\"Description\", /*#__PURE__*/_jsxDEV(\"textarea\", {\n            id: \"description\",\n            type: \"text\",\n            name: \"description\",\n            placeholder: \"Brief description of the deck\",\n            onChange: handleChange,\n            value: formData.value\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            value: \"Submit\",\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\n_s(CreateDeckForm, \"u5Fy1Yqq3yjf8l9BJpQEFCuJagw=\");\n_c = CreateDeckForm;\nexport default CreateDeckForm;\nvar _c;\n$RefreshReg$(_c, \"CreateDeckForm\");","map":{"version":3,"names":["React","useEffect","useState","listDecks","createDeck","readDeck","updateDeck","jsxDEV","_jsxDEV","Fragment","_Fragment","CreateDeckForm","_s","initialFormState","name","description","formData","setformData","handleChange","_ref","target","value","handleSubmit","event","preventDefault","console","log","reset","newDeckPost","result","children","onSubmit","htmlFor","id","type","placeholder","onChange","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/kanchanmhatre/Thinkful/Project_Flashcards_Qualified_1/src/components/CreateDeck/CreateDeckForm.js"],"sourcesContent":["\nimport React, { useEffect, useState } from \"react\";\nimport {listDecks, createDeck, readDeck, updateDeck} from \"../../utils/api/index\"\n\nfunction CreateDeckForm(){\n    const initialFormState = {\n        name: \"\",\n        description: \"\",\n      };\n    const [formData, setformData] = useState({ ...initialFormState }); /* Set form state to blank array*/\n    const handleChange = ({ target }) => {\n        setformData({\n          ...formData,\n          [target.name]: target.value,\n        });\n      };\n    \n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        console.log(\"Submitted:\", formData);\n        setformData({ ...initialFormState });\n        event.target.reset();\n      };\n\nconst newDeckPost = async() => {\n    const result = await createDeck(formData);\n}\n\n\n\n    return (\n        <>\n        <div>\n        <form onSubmit={handleSubmit}>\n              <label htmlFor=\"name\">\n              Name\n            <input\n                id=\"name\"\n                type=\"text\"\n                name=\"name\"\n                placeholder=\"Deck Name\"\n                onChange={handleChange}\n                value={formData.value}\n                \n            />   \n            </label>\n            <label htmlFor=\"description\">\n            Description\n            <textarea\n                id=\"description\"\n                type=\"text\"\n                name=\"description\"\n                placeholder=\"Brief description of the deck\"\n                onChange={handleChange}\n                value={formData.value}\n                \n            />   \n            \n            <button>Cancel</button>\n            <button type=\"submit\" value=\"Submit\">Submit</button>\n            \n            </label>\n\n        </form>\n        </div>\n        </>\n    )\n}\n\n\nexport default CreateDeckForm;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}